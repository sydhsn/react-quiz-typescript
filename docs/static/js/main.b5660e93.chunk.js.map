{"version":3,"sources":["API.tsx","Utils.tsx","components/QuestionCard.style.ts","components/QuestionsCard.tsx","images/bg.jpg","App.style.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","questions","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","correct","userClicked","QuestionCard","question","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","setQuestions","number","setNumber","userAnswers","setUserAnswer","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestion","length","undefined","e","currentTarget","prev","answerObject","correctAnswer","TOTAL_QUESTION","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sHAaYA,E,wFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,QAAMC,EAAkB,uCAAG,WAAOC,EAAgBC,GAAvB,iBAAAC,EAAA,6DACxBC,EADwB,6CACyBH,EADzB,uBAC8CC,EAD9C,2BAEJG,MAAMD,GAFF,8BAEaE,OAFb,cAExBC,EAFwB,yBAGvBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAEdA,GAFa,IAGhBC,SCzBiBC,EDyBK,GAAD,mBACdF,EAAUG,mBADI,CAEjBH,EAAUI,iBC1B1B,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADV,IAACL,MDmBK,2CAAH,wD,cEjBlBM,EAAUC,IAAOC,IAAV,2O,GAkBSD,IAAOC,IAAV,obAYR,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACVD,EACM,4CACCA,GAAWC,EACR,2CACA,8C,MCMHC,EA3BuB,SAAC,GAOhC,IANHC,EAME,EANFA,SACAb,EAKE,EALFA,QACAc,EAIE,EAJFA,SACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,WACAC,EACE,EADFA,eAEA,OACI,eAACV,EAAD,WACI,oBAAGW,UAAU,SAAb,yBACiBF,EADjB,MACgCC,KAEhC,mBAAGE,wBAAyB,CAAEC,OAAQP,KACtC,8BACKb,EAAQF,KAAI,SAACuB,GAAD,OACT,8BACI,wBAAQC,WAAYP,EAAYQ,MAAOF,EAAQG,QAASV,EAAxD,SACI,sBAAMK,wBAAyB,CAAEC,OAAQC,QAFvCA,YChCf,MAA0B,+BCG5BI,EAAcC,YAAH,sTAKIC,GAafpB,EAAUC,IAAOC,IAAV,28BCuFLmB,EA9FH,WAEV,IAFgB,EAIcC,oBAAS,GAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKkBF,mBAA0B,IAL5C,mBAKT9B,EALS,KAKEiC,EALF,OAMYH,mBAAS,GANrB,mBAMTI,EANS,KAMDC,EANC,OAOqBL,mBAAyB,IAP9C,mBAOTM,EAPS,KAOIC,EAPJ,OAQUP,mBAAS,GARnB,mBAQTQ,EARS,KAQFC,EARE,OASgBT,oBAAS,GATzB,mBASTU,EATS,KASCC,EATD,KAYVC,EAAW,uCAAG,4BAAAjD,EAAA,6DAElBuC,GAAW,GACXS,GAAY,GAHM,SAIQnD,EAdL,GAgBnBD,EAAWsD,MANK,OAIZC,EAJY,OASlBX,EAAaW,GACbL,EAAS,GACTF,EAAc,IACdF,EAAU,GACVH,GAAW,GAbO,4CAAH,qDAkDjB,OACE,qCACE,cAACN,EAAD,IACA,eAAC,EAAD,WACE,4CACCc,GAjEgB,KAiEJJ,EAAYS,OACvB,wBAAQ1B,UAAU,QAAQM,QAASiB,EAAnC,mBAGE,KACFF,EAAqD,KAA1C,oBAAGrB,UAAU,QAAb,oBAA6BmB,KACzCP,EAAU,qDAA8B,MACvCA,IAAYS,GACZ,cAAC,EAAD,CACEvB,WAAYiB,EAAS,EACrBhB,eA3Ea,GA4EbJ,SAAUd,EAAUkC,GAAQpB,SAC5Bb,QAASD,EAAUkC,GAAQjC,QAC3Be,WAAYoB,EAAcA,EAAYF,QAAUY,EAChD/B,SApDU,SAACgC,GACnB,IAAKP,EAAU,CAEb,IAAMlB,EAASyB,EAAEC,cAAcxB,MAEzBb,EAAUX,EAAUkC,GAAQ9B,iBAAmBkB,EAEjDX,GAAS4B,GAAS,SAAAU,GAAI,OAAIA,EAAO,KAErC,IAAMC,EAAe,CACnBpC,SAAUd,EAAUkC,GAAQpB,SAC5BQ,SACAX,UACAwC,cAAenD,EAAUkC,GAAQ9B,gBAEnCiC,GAAc,SAAAY,GAAI,4BAAQA,GAAR,CAAcC,WAwC5BV,GAAaT,GAAWK,EAAYS,SAAWX,EAAS,GAAgBkB,IAAXlB,EAI3D,KAHF,wBAAQf,UAAU,OAAOM,QApCZ,WAEnB,IAAM4B,EAAenB,EAAS,EAjDT,KAkDjBmB,EACFZ,GAAY,GAGZN,EAAUkB,IA6BN,kCC/FVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b5660e93.chunk.js","sourcesContent":["import { shuffleArray } from './Utils';\r\n\r\nexport type Questions = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Questions & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((questions: Questions) => (\r\n        {\r\n            ...questions,\r\n            answers: shuffleArray([\r\n                ...questions.incorrect_answers,\r\n                questions.correct_answer\r\n            ])\r\n\r\n        }\r\n    ))\r\n\r\n}","export const shuffleArray = (array: any[]) => \r\n[...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\nmax-width: 1100px;\r\nbackground: #e0e0e0;\r\nborder-radius: 10px;\r\nborder: 2px solid #9e9e9e;\r\npadding: 20px;\r\nbox-shadow: 0px 5px 10px rgb(0 0 0 / 25%);\r\ntext-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n        correct\r\n            ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n            : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.style';\r\n\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNr,\r\n    totalQuestions\r\n}) => {\r\n    return (\r\n        <Wrapper>\r\n            <p className=\"number\">\r\n                Question  : {questionNr} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div>\r\n                {answers.map((answer) => (\r\n                    <div key={answer}>\r\n                        <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/bg.0c725f5e.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\nimport { QuestionState, Difficulty } from './API';\nimport QuestionCard from './components/QuestionsCard';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.style';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n\n  const TOTAL_QUESTION = 10;\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswer] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n\n  const startTrivia = async () => {\n\n    setLoading(true);\n    setGameOver(false);\n    const newQuestion = await fetchQuizQuestions(\n      TOTAL_QUESTION,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestion);\n    setScore(0);\n    setUserAnswer([]);\n    setNumber(0)\n    setLoading(false);\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer \n      const answer = e.currentTarget.value;\n      // check answer againest correct answer\n      const correct = questions[number].correct_answer === answer;\n      // set score \n      if (correct) setScore(prev => prev + 1);\n      // save answer in userAnswer array\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswer(prev => [...prev, answerObject]);\n\n    }\n  }\n\n  const nextQuestion = () => {\n    // move to next question if the question number is not last\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTION) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n  }\n\n\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTION ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTION}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTION - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}